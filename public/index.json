[{"content":"A practical tutorial on jq So here\u0026rsquo;s the problem statement: Find the repository on github in which you have made most number of commits? And you need to do this on terminal (no python)\nOfcourse, one can use python to find the answer, and it might be probably easy for you, if you have been using python for last many years. But let\u0026rsquo;s see if I can do this in terminal with jq and while doing so, let\u0026rsquo;s learn about it.\nFor installation steps, refer this link\nThe endpoint to get all the repos is: https://api.github.com/users/{username}/repos. Let\u0026rsquo;s try that: curl \u0026#39;https://api.github.com/users/mohit2152sharma/repos\u0026#39; # [{\u0026#34;id\u0026#34;:347381136,\u0026#34;node_id\u0026#34;:\u0026#34;MDEwOlJlcG9zaXRvcnkzNDczODExMzY=\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;aqad-utilities\u0026#34;,\u0026#34;full_name\u0026#34;:\u0026#34;mohit2152sharma/aqad-utilities\u0026#34;,\u0026#34;private\u0026#34;:false,\u0026#34;owner\u0026#34;:{\u0026#34;login\u0026#34;:\u0026#34;mohit2152sharma\u0026#34;,\u0026#34;id\u0026#34;:26904579,\u0026#34;node_id\u0026#34;:\u0026#34;MDQ6VXNlcjI2OTA0NTc5\u0026#34;,\u0026#34;avatar_url\u0026#34;:\u0026#34;https://avatars.githubusercontent.com/u/26904579?v=4\u0026#34;,\u0026#34;gravatar_id\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;https://api.github.com/users/mohit2152sharma\u0026#34;,\u0026#34;html_url\u0026#34;:\u0026#34;https://github.com/mohit2152sharma\u0026#34;,\u0026#34;followers_url\u0026#34;:\u0026#34;https://api.github.com/users/mohit2152sharma/followers\u0026#34;,\u0026#34;following_url\u0026#34;:\u0026#34;https://api.github.com/users/mohit2152sharma/following{/other_user}\u0026#34;,\u0026#34;gists_url\u0026#34;:\u0026#34;https://api.github.com/users/mohit2152sharma/gists{/gist_id}\u0026#34;,\u0026#34;starred_url\u0026#34;:\u0026#34;https://api.github.com/users/mohit2152sharma/starred{/owner}{/repo}\u0026#34;, # ... ... If you happen to get an output like above (not pretty), you can easily make it pretty with jq .. The . is also called the identity filter. It takes the input and produces the same value as output. By default it jq pretty prints, so identity filter can be used to pretty print a json output from a command like curl or from a json file (e.g. cat file.json | jq .) curl \u0026#39;https://api.github.com/users/mohit2152sharma/repos\u0026#39; | jq . # [ # { # \u0026#34;id\u0026#34;: 347381136, # \u0026#34;node_id\u0026#34;: \u0026#34;MDEwOlJlcG9zaXRvcnkzNDczODExMzY=\u0026#34;, # \u0026#34;name\u0026#34;: \u0026#34;aqad-utilities\u0026#34;, # ... # ... # ] Let me quickly check what all repositories I have by printing just their name. But let me first check, what all keys are available in the output dictionary. For that, I will use the command jq '.[1] | keys' .[] is the array value iterator, it returns all the values in the array. If you use an integer like .[1] it return the value at index 1. | is a pipe operator. It compbines two filters by taking the output from the filter on left and passing it to the filter on right. keys is a function which returns all the keys of an object (aka dictionary) in an array. There are more builtin functions in jq # output truncated because there are too many keys curl \u0026#39;https://api.github.com/users/mohit2152sharma/repos\u0026#39; | jq \u0026#39;.[1] | keys\u0026#39; # [ # ... # ... # \u0026#34;name\u0026#34;, # \u0026#34;node_id\u0026#34;, # ... # ... # ] The following command .... | jq '.[].name' will return all the names of the repositories. As highlighted above .[] is an array iterator. It iterates over all the values in the array, since each element is an object, I use .name to get the value of key named name. .key_name is an object identifier. When a json object is passed .key_name returns the value at the key \u0026quot;key_name\u0026quot;. You can also do .[\u0026quot;key_name\u0026quot;]. You can also chain the filters .key_name1.key_name2, this is equivalent to .key_name1 | .key_name2. curl \u0026#39;https://api.github.com/users/mohit2152sharma/repos\u0026#39; | jq \u0026#39;.[].name\u0026#39; # \u0026#34;bash-exmpls\u0026#34; # \u0026#34;codesnipper\u0026#34; # \u0026#34;cookiecutter-ml\u0026#34; # \u0026#34;emwv\u0026#34; # ... # ... Let me quickly check, how many public and privte repositories I have. map(f) is a builtin function in jq. It applies the filter f to each element in the array and returns an array. length is also a builtin function, it returns the length (or number of elements) in the array. One can also use it with json objects or string, in those cases, it returns total number of keys and length of string respectively. curl \u0026#39;https://api.github.com/users/mohit2152sharma/repos\u0026#39; | jq \u0026#39;map(select(.visibility==\u0026#34;public\u0026#34;)) | length\u0026#39; # 30 curl \u0026#39;https://api.github.com/users/mohit2152sharma/repos\u0026#39; | jq \u0026#39;map(select(.visibility==\u0026#34;private\u0026#34;)) | length\u0026#39; # 0 # it looks like the response doesn\u0026#39;t include private repos Now let\u0026rsquo;s get back to original question, the repository, in which I have made most number of commits. This more tricky than I expected, because, the url to get the number of commits is different. It is of the form https://api.github.com/users/{user_name}/{repo_name}/commits. So basically, I need to loop through each repo, hit this url, count the number of commits. This became more of bash programming task than that of jq programming task. USER_NAME=mohit2152sharma # get all the repositories getRepoUrl=https://api.github.com/users/${USER_NAME}/repos allRepoNames=\u0026#34;\u0026#34; j=1 while true; do repoInfo=$(curl --url \u0026#34;$getRepoUrl\u0026#34;?page=\u0026#34;$j\u0026#34; --header \u0026#34;Authorization: Bearer $GITHUB_TOKEN\u0026#34;) repoInfoLength=$(echo \u0026#34;$repoInfo\u0026#34; | jq \u0026#39;. | length\u0026#39;) if [ \u0026#34;$repoInfoLength\u0026#34; -eq 0 ]; then # the length of the empty array will be zero break else names=$(echo \u0026#34;$repoInfo\u0026#34; | jq \u0026#39;.[].name\u0026#39;) allRepoNames=\u0026#34;$allRepoNames $names\u0026#34; j=$(( j + 1 )) fi done; # now loop through all repo names and find the commit counts maxCommits=0 repoNameWithMaxCommits=\u0026#34;\u0026#34; for repoName in \u0026#34;$allRepoNames\u0026#34;; do i=1 totalCommits=0 getCommitUrl=https://api.github.com/repos/${USER_NAME}/${repoName}/commits while true; do ncommits=$(curl --url \u0026#34;$getCommitUrl\u0026#34;?page=\u0026#34;$i\u0026#34; --header \u0026#34;Authorization: Bearer $GITHUB_TOKEN\u0026#34; | jq \u0026#39;map(select(.author.login==\u0026#34;mohit2152sharma\u0026#34;)) | length\u0026#39;) if [ \u0026#34;$ncommits\u0026#34; -eq 0 ]; then break else totalCommits=$(( totalCommits + ncommits )) i=$(( i + 1 )) fi done if [ \u0026#34;$totalCommits\u0026#34; -gt \u0026#34;$maxCommits\u0026#34; ]; then maxCommits=$totalCommits repoNameWithMaxCommits=$repoName fi done echo \u0026#34;Repository with most number of commits: ${repoNameWithMaxCommits} with ${maxCommits} commits\u0026#34; The above script prints the following output: # Repository with most number of commits: rcoronavirus with 192 commits ","permalink":"//localhost:1313/posts/jq/","summary":"A practical tutorial on jq So here\u0026rsquo;s the problem statement: Find the repository on github in which you have made most number of commits? And you need to do this on terminal (no python)\nOfcourse, one can use python to find the answer, and it might be probably easy for you, if you have been using python for last many years. But let\u0026rsquo;s see if I can do this in terminal with jq and while doing so, let\u0026rsquo;s learn about it.","title":"How to parse json in terminal using jq"},{"content":"Manager: Hey, I need your help, I have couple of images that are taking a lot of space on my PC, I want to delete them. How can I do that?\nDeveloper: Well that should be simple. Here, you go. This looks for all files with .png extension in the current directory and its subdirectories (using -R flag), then pipes those file names to rm command to delete them.\nls -R | grep \u0026#34;.png$\u0026#34; | xargs rm Manager: Nice, but wait. This will delete all the png files in the current directory and its subdirectories. I only want to delete in specific directories.\nDeveloper: Okay, that should be easy as well.\nls -R dir1 dir2 | grep \u0026#34;.png$\u0026#34; | xargs rm Manager: This only selects .png but I also have image of .jpg and .jpeg files. I want to delete them too.\nDeveloper: Okaay, this getting complicated a little bit. I think I can do that with find command, think that is much safer.\n# command 1 # {} is a placeholder for matched file # {} \\; means execute rm command for each matched file # the -o flag means OR operator and \\( means brackets are escaped # and used to club together the expression using or operator find dir1 dir2 -type f \\( -name \u0026#34;*.png\u0026#34; -o -name \u0026#34;*.jpg\u0026#34; -o -name \u0026#34;*.jpeg\u0026#34; \\) -exec rm {} \\; # command 2 # -E enables extended regex # rm {} + means rm file1 file2 file3 .... find -E dir1 dir2 -type f -regex \u0026#34;.*/.*(png|jpg|jpeg)\u0026#34; -exec rm {} + Manager: Much better, now narrow down the files to only those files which were created in last 7 days.\nDeveloper: Okay, is that it? Or are there any more conditions?\nManager: Yeah, and one more condition, files should be at least 5 MB in size.\nDeveloper: I see, is that it?\nManager: Yeah, think so. Can you do that?\nDeveloper: Sure. This should do the trick.\nfind -E dir1 dir2 -type f -regex \u0026#34;.*/.*(png|jpg|jpeg)\u0026#34; -ctime -7 -size +5M -exec rm {} + Developer: To explain in more detail, find command is of the form: find [flags] [path(s) to search in] [expression(s) or filter(s)] [actions].\n","permalink":"//localhost:1313/posts/find/","summary":"Manager: Hey, I need your help, I have couple of images that are taking a lot of space on my PC, I want to delete them. How can I do that?\nDeveloper: Well that should be simple. Here, you go. This looks for all files with .png extension in the current directory and its subdirectories (using -R flag), then pipes those file names to rm command to delete them.\nls -R | grep \u0026#34;.","title":"Impress your colleagues with find"},{"content":"First Post This is an example post to test the website. It just contains some rough snippets.\ndef hello_world(): print(\u0026#34;Hello, World!\u0026#34;) ","permalink":"//localhost:1313/posts/first-post/","summary":"First Post This is an example post to test the website. It just contains some rough snippets.\ndef hello_world(): print(\u0026#34;Hello, World!\u0026#34;) ","title":"First Post"}]
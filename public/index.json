[{"content":"I always get confused with, should I run git add ., or should I run git add --all, or should I run git add -A? Given all these commands, do a similar thing, confusion is bound to happen. Thankfully, it\u0026rsquo;s not just me. So I decided to take a deep dive into add command of git, to end this confusion once and for all.\nWhat does add even do? The add command adds your changes to staging area. Staging area is a buffer zone where you place your files before committing them. This buffer zone allows you to be selective with your commits, there are some files that you want to commit now and some files that you want to commit later. Staging area is also known as index.\ngit maintains the index in a file located at .git/index in a binary format. We can use git ls-files --stage command which interprets the binary data of index file and presents it in a human-readable format.\n‚ùØ git ls-files --stage 100644 4d0056ce61ad17b3fec9e285b5c41d5cb405040a 0 .github/workflows/gh-pages.yml 100644 89af1b0cdcdba0b5457d5bb4375ca4ca5f6116f9 0 .gitmodules 100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0 .hugo_build.lock ... ... ... The first column describes the file \u0026lt;mode\u0026gt;, indicating the type and permission of file. 100644 means a regular non-executable file. Other valid values are: 100755 which means an executable file, 120000 which means a symbolic link. The second column is the SHA-1 hash of the file\u0026rsquo;s content, referencing the corresponding blob object. The third column is \u0026lt;stage\u0026gt; number which is used during merging. The fourth column is the relative path of the file within the repository. When you run git add \u0026lt;filename\u0026gt;, git computes the SHA-1 hash of the file\u0026rsquo;s content, creates a blob object and stores it in .git/objects/. The blob objects are identified by their SHA-1 hash. It then updates the index file by adding or modifying the entry for the file.\nAll the ways to git add Running git add . adds the changes from your current working directory to staging area. Running git add --all adds the changes from the repository to the staging area. This is irrespective of your working directory. Working directory and repository means different things in git. Working directory is where you make changes and repository is where git records the history of those changes. Your project can have multiple directories, and this command will stage changes from all of them. git add -A is same as git add --all. Running git add * can have the same effect as git add .. But note that * is not a git feature but shells\u0026rsquo; feature. The * globbing pattern will match all the files inside the working directory and add them, including even the dot files. You can also add changes interactively, using git add -i. You can also add changes selectively, using git add -p \u0026lt;filename\u0026gt;. This will open an interactive window, allowing you to select which edits within the \u0026lt;filename\u0026gt; you want to stage. How do you undo the add? You can undo the add by running git reset HEAD -- \u0026lt;filename\u0026gt;. By default, the reset command runs with --mixed option, which means it will reset the staging area to match the specified HEAD, but leaves the working directory unchanged.\nRunning git reset will undo git add -A. That is, if you have added all the changes in your repository, running git reset will undo that.\n","permalink":"//localhost:1313/posts/git-add/","summary":"\u003cp\u003eI always get confused with, should I run \u003ccode\u003egit add .\u003c/code\u003e, or should I run \u003ccode\u003egit add --all\u003c/code\u003e, or should I run \u003ccode\u003egit add -A\u003c/code\u003e? Given all these commands, do a similar thing, confusion is bound to happen. Thankfully, it\u0026rsquo;s not just \u003ca href=\"https://stackoverflow.com/questions/23003118/any-difference-between-git-add-and-git-add-all#:~:text=git%20add%20%2D%2Dall%20will,git%20add%20.\"\u003eme\u003c/a\u003e. So I decided to take a deep dive into \u003ccode\u003eadd\u003c/code\u003e command of \u003ccode\u003egit\u003c/code\u003e, to end this confusion once and for all.\u003c/p\u003e\n\u003ch2 id=\"what-does-add-even-do\"\u003eWhat does \u003ccode\u003eadd\u003c/code\u003e even do?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eadd\u003c/code\u003e command adds your changes to staging area. Staging area is a buffer zone where you place your files before committing them. This buffer zone allows you to be selective with your commits, there are some files that you want to commit now and some files that you want to commit later. Staging area is also known as \u003ccode\u003eindex\u003c/code\u003e.\u003c/p\u003e","title":"All the ways to `git add`"},{"content":"A practical tutorial on jq So here\u0026rsquo;s the problem statement: Find the repository on github in which you have made most number of commits? And you need to do this on terminal (no python)\nOfcourse, one can use python to find the answer, and it might be probably easy for you, if you have been using python for last many years. But let\u0026rsquo;s see if I can do this in terminal with jq and while doing so, let\u0026rsquo;s learn about it.\nFor installation steps, refer this link\nThe endpoint to get all the repos is: https://api.github.com/users/{username}/repos. Let\u0026rsquo;s try that: curl \u0026#39;https://api.github.com/users/mohit2152sharma/repos\u0026#39; # [{\u0026#34;id\u0026#34;:347381136,\u0026#34;node_id\u0026#34;:\u0026#34;MDEwOlJlcG9zaXRvcnkzNDczODExMzY=\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;aqad-utilities\u0026#34;,\u0026#34;full_name\u0026#34;:\u0026#34;mohit2152sharma/aqad-utilities\u0026#34;,\u0026#34;private\u0026#34;:false,\u0026#34;owner\u0026#34;:{\u0026#34;login\u0026#34;:\u0026#34;mohit2152sharma\u0026#34;,\u0026#34;id\u0026#34;:26904579,\u0026#34;node_id\u0026#34;:\u0026#34;MDQ6VXNlcjI2OTA0NTc5\u0026#34;,\u0026#34;avatar_url\u0026#34;:\u0026#34;https://avatars.githubusercontent.com/u/26904579?v=4\u0026#34;,\u0026#34;gravatar_id\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;https://api.github.com/users/mohit2152sharma\u0026#34;,\u0026#34;html_url\u0026#34;:\u0026#34;https://github.com/mohit2152sharma\u0026#34;,\u0026#34;followers_url\u0026#34;:\u0026#34;https://api.github.com/users/mohit2152sharma/followers\u0026#34;,\u0026#34;following_url\u0026#34;:\u0026#34;https://api.github.com/users/mohit2152sharma/following{/other_user}\u0026#34;,\u0026#34;gists_url\u0026#34;:\u0026#34;https://api.github.com/users/mohit2152sharma/gists{/gist_id}\u0026#34;,\u0026#34;starred_url\u0026#34;:\u0026#34;https://api.github.com/users/mohit2152sharma/starred{/owner}{/repo}\u0026#34;, # ... ... If you happen to get an output like above (not pretty), you can easily make it pretty with jq .. The . is also called the identity filter. It takes the input and produces the same value as output. By default it jq pretty prints, so identity filter can be used to pretty print a json output from a command like curl or from a json file (e.g. cat file.json | jq .) curl \u0026#39;https://api.github.com/users/mohit2152sharma/repos\u0026#39; | jq . # [ # { # \u0026#34;id\u0026#34;: 347381136, # \u0026#34;node_id\u0026#34;: \u0026#34;MDEwOlJlcG9zaXRvcnkzNDczODExMzY=\u0026#34;, # \u0026#34;name\u0026#34;: \u0026#34;aqad-utilities\u0026#34;, # ... # ... # ] Let me quickly check what all repositories I have by printing just their name. But let me first check, what all keys are available in the output dictionary. For that, I will use the command jq '.[1] | keys' .[] is the array value iterator, it returns all the values in the array. If you use an integer like .[1] it return the value at index 1. | is a pipe operator. It compbines two filters by taking the output from the filter on left and passing it to the filter on right. keys is a function which returns all the keys of an object (aka dictionary) in an array. There are more builtin functions in jq # output truncated because there are too many keys curl \u0026#39;https://api.github.com/users/mohit2152sharma/repos\u0026#39; | jq \u0026#39;.[1] | keys\u0026#39; # [ # ... # ... # \u0026#34;name\u0026#34;, # \u0026#34;node_id\u0026#34;, # ... # ... # ] The following command .... | jq '.[].name' will return all the names of the repositories. As highlighted above .[] is an array iterator. It iterates over all the values in the array, since each element is an object, I use .name to get the value of key named name. .key_name is an object identifier. When a json object is passed .key_name returns the value at the key \u0026quot;key_name\u0026quot;. You can also do .[\u0026quot;key_name\u0026quot;]. You can also chain the filters .key_name1.key_name2, this is equivalent to .key_name1 | .key_name2. curl \u0026#39;https://api.github.com/users/mohit2152sharma/repos\u0026#39; | jq \u0026#39;.[].name\u0026#39; # \u0026#34;bash-exmpls\u0026#34; # \u0026#34;codesnipper\u0026#34; # \u0026#34;cookiecutter-ml\u0026#34; # \u0026#34;emwv\u0026#34; # ... # ... Let me quickly check, how many public and privte repositories I have. map(f) is a builtin function in jq. It applies the filter f to each element in the array and returns an array. length is also a builtin function, it returns the length (or number of elements) in the array. One can also use it with json objects or string, in those cases, it returns total number of keys and length of string respectively. curl \u0026#39;https://api.github.com/users/mohit2152sharma/repos\u0026#39; | jq \u0026#39;map(select(.visibility==\u0026#34;public\u0026#34;)) | length\u0026#39; # 30 curl \u0026#39;https://api.github.com/users/mohit2152sharma/repos\u0026#39; | jq \u0026#39;map(select(.visibility==\u0026#34;private\u0026#34;)) | length\u0026#39; # 0 # it looks like the response doesn\u0026#39;t include private repos Now let\u0026rsquo;s get back to original question, the repository, in which I have made most number of commits. This more tricky than I expected, because, the url to get the number of commits is different. It is of the form https://api.github.com/users/{user_name}/{repo_name}/commits. So basically, I need to loop through each repo, hit this url, count the number of commits. This became more of bash programming task than that of jq programming task. USER_NAME=mohit2152sharma # get all the repositories getRepoUrl=https://api.github.com/users/${USER_NAME}/repos allRepoNames=\u0026#34;\u0026#34; j=1 while true; do repoInfo=$(curl --url \u0026#34;$getRepoUrl\u0026#34;?page=\u0026#34;$j\u0026#34; --header \u0026#34;Authorization: Bearer $GITHUB_TOKEN\u0026#34;) repoInfoLength=$(echo \u0026#34;$repoInfo\u0026#34; | jq \u0026#39;. | length\u0026#39;) if [ \u0026#34;$repoInfoLength\u0026#34; -eq 0 ]; then # the length of the empty array will be zero break else names=$(echo \u0026#34;$repoInfo\u0026#34; | jq \u0026#39;.[].name\u0026#39;) allRepoNames=\u0026#34;$allRepoNames $names\u0026#34; j=$(( j + 1 )) fi done; # now loop through all repo names and find the commit counts maxCommits=0 repoNameWithMaxCommits=\u0026#34;\u0026#34; for repoName in \u0026#34;$allRepoNames\u0026#34;; do i=1 totalCommits=0 getCommitUrl=https://api.github.com/repos/${USER_NAME}/${repoName}/commits while true; do ncommits=$(curl --url \u0026#34;$getCommitUrl\u0026#34;?page=\u0026#34;$i\u0026#34; --header \u0026#34;Authorization: Bearer $GITHUB_TOKEN\u0026#34; | jq \u0026#39;map(select(.author.login==\u0026#34;mohit2152sharma\u0026#34;)) | length\u0026#39;) if [ \u0026#34;$ncommits\u0026#34; -eq 0 ]; then break else totalCommits=$(( totalCommits + ncommits )) i=$(( i + 1 )) fi done if [ \u0026#34;$totalCommits\u0026#34; -gt \u0026#34;$maxCommits\u0026#34; ]; then maxCommits=$totalCommits repoNameWithMaxCommits=$repoName fi done echo \u0026#34;Repository with most number of commits: ${repoNameWithMaxCommits} with ${maxCommits} commits\u0026#34; The above script prints the following output: # Repository with most number of commits: rcoronavirus with 192 commits ","permalink":"//localhost:1313/posts/jq/","summary":"\u003ch2 id=\"a-practical-tutorial-on-jq\"\u003eA practical tutorial on \u003ccode\u003ejq\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eSo here\u0026rsquo;s the problem statement: \u003cem\u003e\u003cstrong\u003eFind the repository on github in which you have made most number of commits? And you need to do this on terminal (no python)\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eOfcourse, one can use python to find the answer, and it might be probably easy for you, if you have been using python for last many years. But let\u0026rsquo;s see if I can do this in terminal with \u003ccode\u003ejq\u003c/code\u003e and while doing so, let\u0026rsquo;s learn about it.\u003c/p\u003e","title":"How to parse json in terminal using jq"},{"content":"Manager: Hey, I need your help, I have couple of images that are taking a lot of space on my PC, I want to delete them. How can I do that?\nDeveloper: Well that should be simple. Here, you go. This looks for all files with .png extension in the current directory and its subdirectories (using -R flag), then pipes those file names to rm command to delete them.\nls -R | grep \u0026#34;.png$\u0026#34; | xargs rm Manager: Nice, but wait. This will delete all the png files in the current directory and its subdirectories. I only want to delete in specific directories.\nDeveloper: Okay, that should be easy as well.\nls -R dir1 dir2 | grep \u0026#34;.png$\u0026#34; | xargs rm Manager: This only selects .png but I also have image of .jpg and .jpeg files. I want to delete them too.\nDeveloper: Okaay, this getting complicated a little bit. I think I can do that with find command, think that is much safer.\n# command 1 # {} is a placeholder for matched file # {} \\; means execute rm command for each matched file # the -o flag means OR operator and \\( means brackets are escaped # and used to club together the expression using or operator find dir1 dir2 -type f \\( -name \u0026#34;*.png\u0026#34; -o -name \u0026#34;*.jpg\u0026#34; -o -name \u0026#34;*.jpeg\u0026#34; \\) -exec rm {} \\; # command 2 # -E enables extended regex # rm {} + means rm file1 file2 file3 .... find -E dir1 dir2 -type f -regex \u0026#34;.*/.*(png|jpg|jpeg)\u0026#34; -exec rm {} + Manager: Much better, now narrow down the files to only those files which were created in last 7 days.\nDeveloper: Okay, is that it? Or are there any more conditions?\nManager: Yeah, and one more condition, files should be at least 5 MB in size.\nDeveloper: I see, is that it?\nManager: Yeah, think so. Can you do that?\nDeveloper: Sure. This should do the trick.\nfind -E dir1 dir2 -type f -regex \u0026#34;.*/.*(png|jpg|jpeg)\u0026#34; -ctime -7 -size +5M -exec rm {} + Developer: To explain in more detail, find command is of the form: find [flags] [path(s) to search in] [expression(s) or filter(s)] [actions].\n","permalink":"//localhost:1313/posts/find/","summary":"\u003cp\u003e\u003cem\u003e\u003cstrong\u003eManager\u003c/strong\u003e\u003c/em\u003e: Hey, I need your help, I have couple of images that are taking a lot of space on my PC, I want to delete them. How can I do that?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eDeveloper\u003c/strong\u003e\u003c/em\u003e: Well that should be simple. Here, you go. This looks for all files with \u003ccode\u003e.png\u003c/code\u003e extension in the current directory and its subdirectories (using \u003ccode\u003e-R\u003c/code\u003e flag), then pipes those file names to \u003ccode\u003erm\u003c/code\u003e command to delete them.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els -R \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026#34;.png\u003c/span\u003e$\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e xargs rm\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cem\u003e\u003cstrong\u003eManager\u003c/strong\u003e\u003c/em\u003e: Nice, but wait. This will delete all the \u003ccode\u003epng\u003c/code\u003e files in the current directory and its subdirectories. I only want to delete in specific directories.\u003c/p\u003e","title":"How to `find` files in terminal?"},{"content":"First Post This is an example post to test the website. It just contains some rough snippets.\ndef hello_world(): print(\u0026#34;Hello, World!\u0026#34;) ","permalink":"//localhost:1313/posts/first-post/","summary":"\u003ch1 id=\"first-post\"\u003eFirst Post\u003c/h1\u003e\n\u003cp\u003eThis is an example post to test the website. It just contains some rough snippets.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ehello_world\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"First Post"}]